# Ref: https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/default.yaml
# ---------------------------------- Project settings ----------------------------------
project: DSP391m_tomato_detection # (str, optional) project name
name: # (str, optional) experiment name, results saved to 'project/name' directory

data: /home/trong/Downloads/Dataset/Tomato/Detection/Relabeled/final_dataset/Tomato_det/train.yaml
task: detect # (str) YOLO task, i.e. detect, segment, classify, pose, obb
mode: train # (str) YOLO mode, i.e. train, val, predict, export, track, benchmark

save: True # (bool) save train checkpoints and predict results
save_period: -1 # (int) Save checkpoint every x epochs (disabled if < 1)
exist_ok: False # (bool) whether to overwrite existing experiment

# ---------------------------------- Val settings ----------------------------------
val: True # (bool) validate/test during training
split: val # (str) dataset split to use for validation, i.e. 'val', 'test' or 'train'
conf: 0.001 # (float, optional) object confidence threshold for detection (default 0.25 predict, 0.001 val)
iou: 0.7 # (float) intersection over union (IoU) threshold for NMS
max_det: 300 # (int) maximum number of detections per image
half: True # (bool) use half precision (FP16)
dnn: False # (bool) use OpenCV DNN for ONNX inference
plots: True # (bool) save plots and images during train/val

# ---------------------------------- Resource settings ----------------------------------
device: null # (int | str | list, optional) device to run on, i.e. cuda device=0 or device=0,1,2,3 or device=cpu
workers: 4 # (int) number of worker threads for data loading (per RANK if DDP)
amp: True # (bool) Automatic Mixed Precision (AMP) training, choices=[True, False], True runs AMP check

# ---------------------------------- Train settings ----------------------------------
imgsz: 640 # (int | list) input images size as int for train and val modes, or list[h,w] for predict and export modes
fraction: 1.0 # (float) dataset fraction to train on (default is 1.0, all images in train set)

epochs: 500 # (int) number of epochs to train for
batch: 128 # (int) number of images per batch (-1 for AutoBatch)
patience: 50 # (int) epochs to wait for no observable improvement for early stopping of training
resume: False # (bool) resume training from last checkpoint
freeze: 16 # (int | list, optional) freeze first n layers, or freeze list of layer indices during training
pretrained: True # (bool | str) whether to use a pretrained model (bool) or a model to load weights from (str)

deterministic: True # (bool) whether to enable deterministic mode
single_cls: True # (bool) train multi-class data as single-class
rect: False # (bool) rectangular training if mode='train' or rectangular validation if mode='val'
multi_scale: False # (bool) Whether to use multiscale during training
close_mosaic: 10 # (int) disable mosaic augmentation for final epochs (0 to disable)

verbose: True # (bool) whether to print verbose output
cache: False # (bool) True/ram, disk or False. Use cache for data loading
time: # (float, optional) number of hours to train for, overrides epochs if supplied
seed: 99999 # (int) random seed for reproducibility
profile: False # (bool) profile ONNX and TensorRT speeds during training for loggers

# ---------------------------------- Optimizer settings ----------------------------------------------------
optimizer: Adam # (str) optimizer to use, choices=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
cos_lr: True # (bool) use cosine learning rate scheduler
lr0: 1e-6 # (float) initial learning rate (i.e. SGD=1E-2, Adam=1E-3)
lrf: 1e-2 # (float) final learning rate (lr0 * lrf)
momentum: 0.9999 # (float) SGD momentum/Adam beta1
weight_decay: 1e-5 # (float) optimizer weight decay 5e-4
warmup_epochs: 0.0 # (float) warmup epochs (fractions ok)
warmup_momentum: 0.3 # (float) warmup initial momentum
warmup_bias_lr: 0.1 # (float) warmup initial bias lr
nbs: 64 # (int) nominal batch size

# ---------------------------------- Loss settings ----------------------------------
box: 7.5 # (float) box loss gain
cls: 0.5 # (float) cls loss gain (scale with pixels)
dfl: 1.5 # (float) dfl loss gain

# ---------------------------------- Augmentation settings ----------------------------------
hsv_h: 0.015 # (float) image HSV-Hue augmentation (fraction)
hsv_s: 0.7 # (float) image HSV-Saturation augmentation (fraction)
hsv_v: 0.4 # (float) image HSV-Value augmentation (fraction)
degrees: 0.0 # (float) image rotation (+/- deg)
translate: 0.1 # (float) image translation (+/- fraction)
scale: 0.5 # (float) image scale (+/- gain)
shear: 0.0 # (float) image shear (+/- deg)
perspective: 0.0 # (float) image perspective (+/- fraction), range 0-0.001
flipud: 0.0 # (float) image flip up-down (probability)
fliplr: 0.5 # (float) image flip left-right (probability)
bgr: 0.0 # (float) image channel BGR (probability)
mosaic: 1.0 # (float) image mosaic (probability)
mixup: 0.0 # (float) image mixup (probability)
copy_paste: 0.0 # (float) segment copy-paste (probability)
copy_paste_mode: "flip" # (str) the method to do copy_paste augmentation (flip, mixup)
auto_augment: randaugment # (str) auto augmentation policy for classification (randaugment, autoaugment, augmix)
erasing: 0.4 # (float) probability of random erasing during classification training (0-0.9), 0 means no erasing, must be less than 1.0.
crop_fraction: 1.0 # (float) image crop fraction for classification (0.1-1), 1.0 means no crop, must be greater than 0.

